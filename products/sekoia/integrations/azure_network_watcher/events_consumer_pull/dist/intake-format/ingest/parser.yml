name: azure-network-watcher
pipeline:
  - name: json_event
    external:
      name: json.parse-json

  - name: parsed_flow_0
    filter: "{{json_event.message.get('flow.0') != None}}"
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: "{{json_event.message.get('flow.0')}}"
        output_field: result
        pattern: "%{NUMBER:timestamp},%{IP:source_ip},%{IP:destination_ip},%{NUMBER:source_port},%{NUMBER:destination_port},%{PROTOCOL:protocol},%{TRAFFICFLOW:traffic_flow},%{TRAFFICDECISION:traffic_decision}(|,(%{FLOWSTATE:flow_state}|),(%{INT:source_packets}|),(%{INT:source_bytes}|),(%{INT:destination_packets}|),(%{INT:destination_bytes}|))"
        custom_patterns:
          "PROTOCOL": "T|U"
          "TRAFFICFLOW": "I|O"
          "TRAFFICDECISION": "A|D"
          "FLOWSTATE": "B|C|E"

  - name: set_common_fields
  - name: set_network_fields
  - name: set_source_fields
  - name: set_destination_fields
  - name: finalizer

stages:
  finalizer:
    actions:
      - set:
          action.outcome: success
        filter: "{{final.action.outcome == null and final.action.name != null}}"

  set_source_fields:
    actions:
      - set:
          source.ip: "{{json_event.message.source_addr or parsed_flow_0.result.source_ip}}"
          source.port: "{{json_event.message.source_port or parsed_flow_0.result.source_port}}"
          source.packets: "{{parsed_flow_0.result.source_packets}}"
          source.bytes: "{{parsed_flow_0.result.source_bytes}}"
          source.mac: "{{json_event.message.macAddress}}"

  set_destination_fields:
    actions:
      - set:
          destination.ip: "{{json_event.message.destination_addr or parsed_flow_0.result.destination_ip}}"
          destination.port: "{{json_event.message.destination_port or parsed_flow_0.result.destination_port}}"
          destination.packets: "{{parsed_flow_0.result.destination_packets}}"
          destination.bytes: "{{parsed_flow_0.result.destination_bytes}}"

  set_common_fields:
    actions:
      - set:
          event.category: ["network"]
          event.code: "{{json_event.message.operationName}}"
          "@timestamp": "{{json_event.message.time}}"
          # backward compatibility
          event.start: "{{final.get('@timestamp')}}"

          rule.name: "{{json_event.message.rule}}"

          action.type: "{{json_event.message.rule}}"
          action.target: "network-traffic"
          action.properties.OperationName: "{{json_event.message.operationName}}"
          action.properties.Version: "{{json_event.message.version}}"
          action.properties.FlowState: "{{json_event.message.flow_state}}"

      - set:
          event.action: "accept"
          action.name: "accept"
          event.type: ["allowed"]
        filter: "{{parsed_flow_0.result.traffic_decision == 'A'}}"

      - set:
          event.action: "reject"
          action.name: "reject"
          event.type: ["denied"]
        filter: "{{parsed_flow_0.result.traffic_decision == 'D'}}"

  set_network_fields:
    actions:
      - translate:
        dictionary:
          "T": "tcp"
        mapping:
          parsed_flow_0.result.protocol: network.transport
        fallback: "udp"

      - translate:
        dictionary:
          "B": "begin"
          "C": "continue"
          "E": "end"
        mapping:
          parsed_flow_0.result.flow_state: action.properties.FlowState

      - translate:
        dictionary:
          "I": "inbound"
          "O": "outbound"
        mapping:
          parsed_flow_0.result.traffic_flow: network.direction
        fallback: "{{parsed_flow_0.result.traffic_flow}}"
