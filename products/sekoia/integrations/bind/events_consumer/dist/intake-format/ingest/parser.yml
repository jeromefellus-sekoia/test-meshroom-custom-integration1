name: bind9
pipeline:
  - name: parse_event
    external:
      name: grok.match
      properties:
        output_field: message
        pattern: "%{RPZ_01}|%{RPZ_02}|%{RESOLVING}|%{VALIDATING}|%{CLIENT}|%{CLIENT_FAILURE}|%{GENERAL}|%{XFER}"
        custom_patterns:
          HEADER: 'client ?(%{DATA}) %{IP:src}#%{INT:spt} \(%{DATA:dns_question}\): '
          UPPERCASE: '([A-Z]|\s)+'
          QUERY_FLAGS: "%{QUERY_FLAGS_RD:flags_rd}%{QUERY_FLAGS_EDNS:flags_edns}?%{QUERY_FLAGS_TCP:flags_tcp}?%{QUERY_FLAGS_DNSSEC:flags_dnssec}?%{QUERY_FLAGS_CD:flags_cd}?%{QUERY_FLAGS_DNS_SERVER_COOKIE}?%{QUERY_FLAGS_DNS_SERVER_COOKIE_WITHOUT_VALID_SERVER}?"
          QUERY_FLAGS_RD: '[\+\-]'
          QUERY_FLAGS_SIGNED: "S?"
          QUERY_FLAGS_EDNS: 'E(\(%{INT}\))?'
          QUERY_FLAGS_TCP: "T"
          QUERY_FLAGS_DNSSEC: "D"
          QUERY_FLAGS_CD: "C"
          QUERY_FLAGS_DNS_SERVER_COOKIE: "V"
          QUERY_FLAGS_DNS_SERVER_COOKIE_WITHOUT_VALID_SERVER: "K"
          CLIENT: '%{HEADER}%{WORD:dns_type}: %{IPORHOST:dns_question_name} %{WORD:dns_question_class} %{WORD:dns_question_type} %{QUERY_FLAGS} \(%{IP:dns_answer_data}\)( -> %{WORD:response_code}( %{IPORHOST:dns_answer_name} %{WORD:dns_answer_class} %{WORD:dns_answer_type} %{IP:dns_answer_ip})?)?'
          CLIENT_FAILURE: "%{HEADER}%{DATA:error_msg}( for %{IPORHOST:dns_question_name}/%{WORD:dns_question_class}/%{WORD:dns_question_type}%{DATA})?(: %{WORD:response_code})?"
          RPZ_01: "(%{HEADER})?rpz %{UPPERCASE:rpz_policy} %{WORD:rpz_action} %{IPORHOST:dns_question_name}/%{WORD:dns_question_class}/%{WORD:dns_question_type}%{GREEDYDATA}"
          RPZ_02: "(%{HEADER})?rpz: %{DATA:rpz_name}: (%{WORD:rpz_action} %{WORD:rpz_status}(: %{WORD:error_msg})?|%{GREEDYDATA:error_msg})"
          GENERAL: "(%{HEADER})?(general: )?(%{WORD:log_level}: )?zone %{IPORHOST:rpz_name}/%{WORD:rpz_type}: (%{IPORHOST:dns_question_name}/%{WORD:dns_question_type}: )?(%{WORD:rpz_action}: )?%{GREEDYDATA:event_reason}"
          XFER: "(%{HEADER})?(xfer-(in|out): )?(%{WORD:log_level}: )?(?P<rpz_action>transfer) of '%{IPORHOST:rpz_name}/%{WORD:rpz_type}' from %{IPORHOST:src}#%{INT:spt}: (Transfer ((status: %{GREEDYDATA:rpz_status})|(%{WORD:rpz_status}: %{GREEDYDATA})))?(%{DATA:error_msg}: %{GREEDYDATA})?%{GREEDYDATA:event_reason}?"
          RESOLVING: "(%{HEADER})?%{DATA:rpz_status} (?P<rpz_action>resolving) '%{IPORHOST:dns_question_name}(/%{WORD:dns_question_class})?(/%{WORD:dns_question_type})?'%{DATA}(: %{IP:src}#%{INT:spt})?"
          VALIDATING: "(%{HEADER})?%{DATA}(?P<rpz_action>validating) %{IPORHOST:dns_question_name}(/%{WORD:dns_question_class})?(/%{WORD:dns_question_type})?: %{GREEDYDATA:error_msg}"
  - name: set_ecs_fields
  - name: set_bind_fields

stages:
  set_ecs_fields:
    actions:
      - set:
          source.ip: "{{parse_event.message.src}}"
        filter: "{{parse_event.message.src | is_ipaddress}}"

      - set:
          source.port: "{{parse_event.message.spt}}"
          dns.question.class: "{{parse_event.message.dns_question_class}}"
          dns.question.type: "{{parse_event.message.dns_question_type}}"
          dns.question.name: "{{parse_event.message.dns_question_name or parse_event.message.dns_question}}"
          dns.response_code: "{{parse_event.message.response_code}}"
          dns.type: "{{parse_event.message.dns_type}}"
          event.reason: "{{parse_event.message.event_reason}}"
          log.level: "{{parse_event.message.log_level}}"

      - set:
          error.message: "{{parse_event.message.error_msg}}"
        filter: "{{parse_event.message.error_msg != 'success' and 'completed' not in parse_event.message.error_msg}}"

      - set:
          dns.type: "query"
        filter: "{{parse_event.message.dns_type == None}}"

      - set:
          dns.answers: >
            [
              {
                "data": "{{parse_event.message.dns_answer_data}}",
                "type": "{{parse_event.message.dns_question_type}}"
              },
              {% if parse_event.message.dns_answer_name != None %}
              {
                "class": "{{parse_event.message.dns_answer_class}}",
                "data": "{{parse_event.message.dns_answer_ip}}",
                "name": "{{parse_event.message.dns_answer_name}}",
                "type": "{{parse_event.message.dns_answer_type}}"
              }
              {% endif %}
            ]
        filter: "{{parse_event.message.dns_answer_data != None and parse_event.message.dns_type == 'answer'}}"

      - set:
          dns.header_flags: >
            [
              {% if parse_event.message.flags_rd == "+" %}"RD",{% endif %}
              {% if parse_event.message.flags_cd == "C" %}"CD",{% endif %}
            ]
        filter: "{{(parse_event.message.get('flags_cd') != None or parse_event.message.get('flags_rd') != None)}}"

      - set:
          network.transport: "tcp"
        filter: '{{parse_event.message.flags_tcp == "T"}}'

  set_bind_fields:
    actions:
      - set:
          bind.rpz.policy: "{{parse_event.message.rpz_policy}}"
        filter: "{{parse_event.message.rpz_policy != None}}"

      - set:
          bind.rpz.action: "{{parse_event.message.rpz_action}}"
        filter: "{{parse_event.message.rpz_action != None}}"

      - set:
          bind.rpz.name: "{{parse_event.message.rpz_name}}"
        filter: "{{parse_event.message.rpz_name != None}}"

      - set:
          bind.rpz.status: "{{parse_event.message.rpz_status}}"
        filter: "{{parse_event.message.rpz_status != None}}"

      - set:
          bind.rpz.type: "{{parse_event.message.rpz_type}}"
        filter: "{{parse_event.message.rpz_type != None}}"

      - set:
          bind.rpz.action: "transfer"
        filter: "{{'transfer' in parse_event.message.event_reason|lower and parse_event.message.rpz_action == None}}"

      - set:
          bind.rpz.status: "{{parse_event.message.event_reason.split(' ')[1].split('.')[0]}}"
        filter: "{{'transfer' in parse_event.message.event_reason|lower and parse_event.message.rpz_action == None and parse_event.message.event_reason.split(' ')|length == 2}}"

      - set:
          bind.rpz.status: "{{parse_event.message.error_msg.split(' ')|first}}"
        filter: "{{parse_event.message.error_msg != None and parse_event.message.rpz_status == None and parse_event.message.rpz_action == 'transfer'}}"
