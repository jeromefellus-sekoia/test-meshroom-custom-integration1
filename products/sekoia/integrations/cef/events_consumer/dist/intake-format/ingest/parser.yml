name: cef
pipeline:
  - name: parsed_event
    external:
      name: cef.parse-cef

  - name: parse_start_date
    filter: "{{parsed_event.message.start != null or parsed_event.message.startTime != null}}"
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.start or parsed_event.message.startTime}}"
        output_field: date

  - name: parse_end_date
    filter: "{{parsed_event.message.end != null or parsed_event.message.endTime != null}}"
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.end or parsed_event.message.endTime}}"
        output_field: date

  # Parse 'rt' (as a timestamp or as a date)
  - name: parse_receipt_time
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.rt}}"
        output_field: date

  - name: set_timestamp
  - name: set_cef_header_fields
  - name: set_cef_extension_fields
  - name: set_cef_extension_fields_cef

stages:
  set_timestamp:
    actions:
      # Default timestamp is the start or startTime field
      - set:
          "@timestamp": "{{parse_start_date.date}}"

      # Second choice is the receipt time (rc) field
      - set:
          "@timestamp": "{{parse_receipt_time.date}}"
        filter: "{{parse_start_date == null and parse_receipt_time != null}}"

      # Last choice is the end or endTime field
      - set:
          "@timestamp": "{{parse_end_date.date}}"
        filter: "{{parse_start_date == null and parse_receipt_time == null and parse_end_date != null}}"

  set_cef_header_fields:
    # CEF:Version|Device Vendor|Device Product|Device Version|Device Event Class ID|Name|Severity|[Extension]
    actions:
      - set:
          observer.vendor: "{{parsed_event.message.DeviceVendor}}"
          observer.type: "{{parsed_event.message.DeviceProduct}}"
          observer.version: "{{parsed_event.message.DeviceVersion}}"
          rule.id: "{{parsed_event.message.DeviceEventClassID}}"

      - set:
          # Match only for agentSeverity of type int
          event.severity: "{{parsed_event.message.Severity}}"
        filter: "{{parsed_event.message.Severity | re_match('[1-9]|10')}}"

  set_cef_extension_fields:
    actions:
      - set:
          event.action: "{{parsed_event.message.act}}"
          network.protocol: "{{parsed_event.message.app}}"
          event.reason: "{{parsed_event.message.msg}}"
          file.name: "{{parsed_event.message.fname}}"
          file.size: "{{parsed_event.message.fsize}}"
          source.user.name: "{{parsed_event.message.suser}}"
          destination.domain: "{{parsed_event.message.get('destination DnsDomain')}}"
          service.name: "{{parsed_event.message.get('destination ServiceName')}}"
          destination.nat.port: "{{parsed_event.message.get('destination TranslatedPort')}}"
      - set:
          destination.nat.ip: "{{parsed_event.message.get('destination Translated Address')}}"
        filter: "{{parsed_event.message.get('destination Translated Address') | is_ipaddress}}"

      - set:
          source.ip: "{{parsed_event.message.src}}"
        filter: "{{parsed_event.message.src | is_ipaddress}}"

      - set:
          source.ip: "{{parsed_event.message.sourceAddress}}"
        filter: "{{parsed_event.message.sourceAddress | is_ipaddress}}"

      - translate:
        dictionary:
          0: "inbound"
          1: "outbound"
        mapping:
          parsed_event.message.deviceDirection: network.direction

      - set:
          host.name: "{{parsed_event.message.dvchost or parsed_event.message.get('deviceDns Domain')}}"
          host.id: "{{parsed_event.message.get('device ExternalId')}}"
          log.syslog.facility.name: "{{parsed_event.message.deviceFacility}}"
          observer.ingress.interface.name: "{{parsed_event.message.get('deviceInbound Interface')}}"
          host.domain: "{{parsed_event.message.get('deviceNt Domain')}}"
          observer.egress.interface.name: "{{parsed_event.message.get('Device Outbound Interface')}}"
          process.name: "{{parsed_event.message.get('deviceProcess Name')}}"
          destination.domain: "{{parsed_event.message.dhost or parsed_event.message.dntdom}}"
          destination.port: "{{parsed_event.message.dpt}}"
          event.timezone: "{{parsed_event.message.dtz}}"
          destination.user.id: "{{parsed_event.message.duid}}"
          destination.user.name: "{{parsed_event.message.duser}}"
          destination.mac: "{{parsed_event.message.dmac}}"
          event.end: "{{parse_end_date.date}}"
          file.inode: "{{parsed_event.message.fileId}}"
          file.mtime: "{{parsed_event.message.get('fileModification Time')}}"
          file.path: "{{parsed_event.message.filePath}}"
          file.type: "{{parsed_event.message.fileType}}"
          host.network.ingress.bytes: "{{parsed_event.message.in}}"
          host.network.egress.bytes: "{{parsed_event.message.out}}"
          event.outcome: "{{parsed_event.message.outcome}}"
          event.action: "{{parsed_event.message.reason}}"
          url.original: "{{parsed_event.message.request}}"
          user_agent.original: "{{parsed_event.message.get('requestClient Application')}}"
          http.request.referrer: "{{parsed_event.message.requestContext}}"
          http.request.method: "{{parsed_event.message.requestMethod}}"
          host.hostname: "{{parsed_event.message.shost or parsed_event.message.sourceHostName}}"
          source.domain: "{{parsed_event.message.get('sourceDns Domain')}}"
          source.mac: "{{parsed_event.message.smac}}"
          source.port: "{{parsed_event.message.spt}}"
          source.nat.port: "{{parsed_event.message.get('source TranslatedPort')}}"
          event.start: "{{parse_start_date.date}}"

      - set:
          server.nat.ip: "{{parsed_event.message.get('device Translated Address')}}"
        filter: "{{parsed_event.message.get('device Translated Address') | is_ipaddress}}"

      - set:
          source.nat.ip: "{{parsed_event.message.get('source Translated Address')}}"
        filter: "{{parsed_event.message.get('source Translated Address')  | is_ipaddress}}"

      - set:
          server.ip: "{{parsed_event.message.dvc}}"
        filter: "{{parsed_event.message.dvc | is_ipaddress}}"

      - set:
          destination.ip: "{{parsed_event.message.dst}}"
        filter: "{{parsed_event.message.dst  | is_ipaddress}}"

      - translate:
        dictionary:
          0: "hopopt"
          1: "icmp"
          2: "igmp"
          3: "ggp"
          4: "ipv4"
          5: "st"
          6: "tcp"
          7: "cbt"
          8: "egp"
          9: "igp"
          10: "bbn-rcc-mon"
          11: "nvp-ii"
          12: "pup"
          13: "argus"
          14: "emcon"
          15: "xnet"
          16: "chaos"
          17: "udp"
          18: "mux"
          19: "dcn-meas"
          20: "hmp"
          21: "prm"
          22: "xns-idp"
          23: "trunk-1"
          24: "trunk-2"
          25: "leaf-1"
          26: "leaf-2"
          27: "rdp"
          28: "irtp"
          29: "iso-tp4"
          30: "netblt"
          31: "mfe-nsp"
          32: "merit-inp"
          33: "dccp"
          34: "3pc"
          35: "idpr"
          36: "xtp"
          37: "ddp"
          38: "idpr-cmtp"
          39: "tp++"
          40: "il"
          41: "ipv6"
          42: "sdrp"
          43: "ipv6-route"
          44: "ipv6-frag"
          45: "idrp"
          46: "rsvp"
          47: "gre"
          48: "dsr"
          49: "bna"
          50: "esp"
          51: "ah"
          52: "i-nlsp"
          53: "swipe"
          54: "narp"
          55: "mobile"
          56: "tlsp"
          57: "skip"
          58: "ipv6-icmp"
          59: "ipv6-nonxt"
          60: "ipv6-opts"
          61: "any host internal protocol"
          62: "cftp"
          63: "any local network"
          64: "sat-expak"
          65: "kryptolan"
          66: "rvd"
          67: "ippc"
          68: "any distributed file system"
          69: "sat-mon"
          70: "visa"
          71: "ipcv"
          72: "cpnx"
          73: "cphb"
          74: "wsn"
          75: "pvp"
          76: "br-sat-mon"
          77: "sun-nd"
          78: "wb-mon"
          79: "wb-expak"
          80: "iso-ip"
          81: "vmtp"
          82: "secure-vmtp"
          83: "vines"
          84: "ttp"
          85: "nsfnet-igp"
          86: "dgp"
          87: "tcf"
          88: "eigrp"
          89: "ospfigp"
          90: "sprite-rpc"
          91: "larp"
          92: "mtp"
          93: "ax.25"
          94: "ipip"
          95: "micp"
          96: "scc-sp"
          97: "etherip"
          98: "encap"
          99: "any private encryption scheme"
          100: "gmtp"
          101: "ifmp"
          102: "pnni"
          103: "pim"
          104: "aris"
          105: "scps"
          106: "qnx"
          107: "a/n"
          108: "ipcomp"
          109: "snp"
          110: "compaq-peer"
          111: "ipx-in-ip"
          112: "vrrp"
          113: "pgm"
          114: "any 0-hop protocol"
          115: "l2tp"
          116: "ddx"
          117: "iatp"
          118: "stp"
          119: "srp"
          120: "uti"
          121: "smp"
          122: "sm"
          123: "ptp"
          124: "isis over ipv4"
          125: "fire"
          126: "crtp"
          127: "crudp"
          128: "sscopmce"
          129: "iplt"
          130: "sps"
          131: "pipe"
          132: "sctp"
          133: "fc"
          134: "rsvp-e2e-ignore"
          135: "mobility header"
          136: "udplite"
          137: "mpls-in-ip"
          138: "manet"
          139: "hip"
          140: "shim6"
          141: "wesp"
          142: "rohc"
          253: "unassigned"
          254: "use for experimentation and testing"
          255: "reserved"
        mapping:
          parsed_event.message.proto: network.transport

      - translate:
        dictionary:
          0: "base event"
          1: "aggregated"
          2: "correlation"
          3: "action"
        mapping:
          parsed_event.message.type: cef.event_type
        fallback: "base event"

  set_cef_extension_fields_cef:
    actions:
      - set:
          cef: "{{parsed_event.message}}"
