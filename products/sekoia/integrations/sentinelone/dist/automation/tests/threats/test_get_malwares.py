import os
from unittest.mock import patch

import pytest
import requests_mock

from sentinelone_module.base import SentinelOneConfiguration, SentinelOneModule
from sentinelone_module.threats import ThreatFilters
from sentinelone_module.threats.get_malwares import GetMalwaresAction, GetMalwaresArguments, GetMalwaresResult


@pytest.fixture(scope="module")
def arguments():
    return GetMalwaresArguments(
        threat_id="0123456789",
        timeout=360,
        filters=ThreatFilters(group_ids=["1234567890"]),
    )


def test_get_malware(symphony_storage, sentinelone_hostname, sentinelone_module, arguments):
    action = GetMalwaresAction(module=sentinelone_module, data_path=symphony_storage)

    with (
        requests_mock.Mocker() as mock,
        patch(
            "sentinelone_module.threats.get_malwares.generate_password",
            return_value="Mypa$$w0rd",
        ),
    ):
        # flake8: noqa
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/system/status",
            json={"data": {"health": "ok"}},
        )
        mock.post(
            f"https://{sentinelone_hostname}/web/api/v2.1/threats/fetch-file",
            json={"data": {"affected": 1}},
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789",
            json={
                "data": [
                    {
                        "activityType": 4008,
                        "createdAt": "2022-08-04T08:52:06.644296Z",
                        "data": {
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "\\Device\\HarddiskVolume4\\METASPLOIT-FRAMEWORK\\embedded\\framework\\data\\exploits\\dell_protect\\dell_protect.x64.dll",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                        },
                    },
                ],
                "pagination": {"nextCursor": "0123456789", "totalItems": 2},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789&cursor=0123456789",
            json={
                "data": [
                    {
                        "activityType": 86,
                        "createdAt": "2022-08-05T07:50:48.864939Z",
                        "data": {
                            "downloadUrl": "/agents/0123456789/uploads/0987654321",
                            "externalIp": "1.2.3.4",
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "/agents/0123456789/uploads/0987654321",
                            "fileSize": 221696,
                            "filename": "dcclient_2022-08-05_07_50_48.836",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                            "uploadedFilename": "dcclient_2022-08-05_07:50:48.zip",
                        },
                    },
                ],
                "pagination": {"nextCursor": "0987654321", "totalItems": 3},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789&cursor=0987654321",
            json={
                "data": [
                    {
                        "activityType": 4008,
                        "createdAt": "2022-08-05T07:49:11.000000Z",
                        "data": {
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "\\Device\\HarddiskVolume4\\METASPLOIT-FRAMEWORK\\embedded\\framework\\data\\exploits\\dell_protect\\dell_protect.x64.dll",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                        },
                    },
                ],
                "pagination": {"nextCursor": None, "totalItems": 3},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/agents/0123456789/uploads/0987654321",
            content=b"PK\x03\x04\n\x00\t\x00\x00\x00gw\x05U\x93\x06\xd72\r\x00\x00\x00\x01\x00\x00\x00\t\x00\x1c\x00empty.txtUT\t\x00\x03!\x14\xedb\x8a\x14\xedbux\x0b\x00\x01\x04\xf5\x01\x00\x00\x04\x00\x00\x00\x005y\x08X\x9c\x831\x1f\xf3\x96\x16\x90\x8fPK\x07\x08\x93\x06\xd72\r\x00\x00\x00\x01\x00\x00\x00PK\x03\x04\x14\x00\t\x00\x08\x00'x\x05U\xd7\xd5\x8d\x89\xb0\x00\x00\x00\x02\x01\x00\x00\r\x00\x1c\x00manifest.jsonUT\t\x00\x03\x99\x14\xedb\x99\x14\xedbux\x0b\x00\x01\x04\xf5\x01\x00\x00\x04\x00\x00\x00\x00\x93\x1a}c<Z@!l\x87\x18A\x9a\xcbu\x0c\xf7y\xba\xeef\x10\xfengF\xed*mR\xe9\x88Q\xda\xa5\xe3\xc1\x02\x0f+q-\x8f\xfaDPa\xbe\x88\x86]\x85\xb4'\xe2~\xadU\x99\xc7(UhZ&\x0fT\x7f\r@\xacXIl\xe0\xe2gw\x8f\xffF0F\xc6\xa9\xe4y04\xfb\x12\xae\xc5L\x8d\x9f\xef\xc5\xfa\xc53\x1c\xde\xea\xe5\x9dP\xe4\x92e;`\xfc\x87P\x90\x90\x00\xb2\xbb\xe6\xa5\xa1V\xed\x8c!\xf6\x15F\x93z\x84\x04!?\xf20\xd2\x08\xc2o\xda\xd0\x0e\x07\x9e\xc8q\xa8\xceG\xcb\r0\xeb\x83\xa4\x17\x03U\x7f\xb00`c\xc2\x83l\xfc\x93.G>m\x0bPK\x07\x08\xd7\xd5\x8d\x89\xb0\x00\x00\x00\x02\x01\x00\x00PK\x01\x02\x1e\x03\n\x00\t\x00\x00\x00gw\x05U\x93\x06\xd72\r\x00\x00\x00\x01\x00\x00\x00\t\x00\x18\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa4\x81\x00\x00\x00\x00empty.txtUT\x05\x00\x03!\x14\xedbux\x0b\x00\x01\x04\xf5\x01\x00\x00\x04\x00\x00\x00\x00PK\x01\x02\x1e\x03\x14\x00\t\x00\x08\x00'x\x05U\xd7\xd5\x8d\x89\xb0\x00\x00\x00\x02\x01\x00\x00\r\x00\x18\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa4\x81`\x00\x00\x00manifest.jsonUT\x05\x00\x03\x99\x14\xedbux\x0b\x00\x01\x04\xf5\x01\x00\x00\x04\x00\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x02\x00\x02\x00\xa2\x00\x00\x00g\x01\x00\x00\x00\x00",
        )
        # flake8: qa
        result = action.run(arguments)
        assert result is not None
        assert result.get("status") == "succeed"
        assert len(result.get("files")) > 0
        for file in result.get("files"):
            assert (symphony_storage / file["path"]).exists()


def test_get_malware_failed_no_affected(symphony_storage, sentinelone_hostname, sentinelone_module, arguments):
    action = GetMalwaresAction(module=sentinelone_module, data_path=symphony_storage)

    with requests_mock.Mocker() as mock:
        # flake8: noqa
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/system/status",
            json={"data": {"health": "ok"}},
        )
        mock.post(
            f"https://{sentinelone_hostname}/web/api/v2.1/threats/fetch-file",
            json={"data": {"affected": 0}},
        )

        result = action.run(arguments)
        assert result is not None
        assert result.get("status") == "failed"


def test_get_malware_download_failed(symphony_storage, sentinelone_hostname, sentinelone_module, arguments):
    action = GetMalwaresAction(module=sentinelone_module, data_path=symphony_storage)

    with requests_mock.Mocker() as mock:
        # flake8: noqa
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/system/status",
            json={"data": {"health": "ok"}},
        )
        mock.post(
            f"https://{sentinelone_hostname}/web/api/v2.1/threats/fetch-file",
            json={"data": {"affected": 1}},
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789",
            json={
                "data": [
                    {
                        "activityType": 86,
                        "createdAt": "2022-08-05T07:50:48.864939Z",
                        "data": {
                            "downloadUrl": "/agents/0123456789/uploads/0987654321",
                            "externalIp": "1.2.3.4",
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "/agents/0123456789/uploads/0987654321",
                            "fileSize": 221696,
                            "filename": "dcclient_2022-08-05_07_50_48.836",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                            "uploadedFilename": "dcclient_2022-08-05_07:50:48.zip",
                        },
                    },
                ],
                "pagination": {"nextCursor": None, "totalItems": 3},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/agents/0123456789/uploads/0987654321",
            status_code=404,
        )

        result = action.run(arguments)
        assert result is not None
        assert result.get("status") == "failed"


def test_get_malware_invalid_zipfile(symphony_storage, sentinelone_hostname, sentinelone_module, arguments):
    action = GetMalwaresAction(module=sentinelone_module, data_path=symphony_storage)

    with requests_mock.Mocker() as mock:
        # flake8: noqa
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/system/status",
            json={"data": {"health": "ok"}},
        )
        mock.post(
            f"https://{sentinelone_hostname}/web/api/v2.1/threats/fetch-file",
            json={"data": {"affected": 1}},
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789",
            json={
                "data": [
                    {
                        "activityType": 86,
                        "createdAt": "2022-08-05T07:50:48.864939Z",
                        "data": {
                            "downloadUrl": "/agents/0123456789/uploads/0987654321",
                            "externalIp": "1.2.3.4",
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "/agents/0123456789/uploads/0987654321",
                            "fileSize": 221696,
                            "filename": "dcclient_2022-08-05_07_50_48.836",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                            "uploadedFilename": "dcclient_2022-08-05_07:50:48.zip",
                        },
                    },
                ],
                "pagination": {"nextCursor": None, "totalItems": 3},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/agents/0123456789/uploads/0987654321",
            content=b"",
        )

        result = action.run(arguments)
        assert result is not None
        assert result.get("status") == "failed"


def test_get_malware_exhauted_retries(symphony_storage, sentinelone_hostname, sentinelone_module):
    arguments = GetMalwaresArguments(
        threat_id="0123456789",
        timeout=1,
        filters=ThreatFilters(group_ids=["1234567890"]),
    )
    action = GetMalwaresAction(module=sentinelone_module, data_path=symphony_storage)

    with requests_mock.Mocker() as mock:
        # flake8: noqa
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/system/status",
            json={"data": {"health": "ok"}},
        )
        mock.post(
            f"https://{sentinelone_hostname}/web/api/v2.1/threats/fetch-file",
            json={"data": {"affected": 1}},
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/activities?limit=1000&sortBy=createdAt&sortOrder=desc&threatIds=0123456789",
            json={
                "data": [
                    {
                        "activityType": 4008,
                        "createdAt": "2022-08-04T08:52:06.644296Z",
                        "data": {
                            "fileContentHash": "95e979551bd820befb1aa9f03c39513033e9273f",
                            "fileDisplayName": "dell_protect.x64.dll",
                            "filePath": "\\Device\\HarddiskVolume4\\METASPLOIT-FRAMEWORK\\embedded\\framework\\data\\exploits\\dell_protect\\dell_protect.x64.dll",
                            "fullScopeDetails": "Group Default Group in Site Default site of Account Danone",
                            "fullScopeDetailsPath": "Global / Danone / Default site / Default Group",
                        },
                    },
                ],
                "pagination": {"nextCursor": None, "totalItems": 3},
            },
        )
        mock.get(
            f"https://{sentinelone_hostname}/web/api/v2.1/agents/0123456789/uploads/0987654321",
            status_code=404,
        )

        result = action.run(arguments)
        assert result is not None
        assert result.get("status") == "timeout"


@pytest.mark.skipif(
    "{'SENTINELONE_HOSTNAME', 'SENTINELONE_API_TOKEN', 'SENTINELONE_THREAT_ID'}.issubset(os.environ.keys()) == False"  # noqa
)
def test_get_malware_integration(symphony_storage):
    module = SentinelOneModule()
    module.configuration = SentinelOneConfiguration(
        hostname=os.environ["SENTINELONE_HOSTNAME"],
        api_token=os.environ["SENTINELONE_API_TOKEN"],
    )
    arguments = GetMalwaresArguments(
        threat_id=os.environ["SENTINELONE_THREAT_ID"],
        timeout=360,
    )

    action = GetMalwaresAction(module=module, data_path=symphony_storage)
    result = action.run(arguments)
    assert result is not None
    assert result["status"] == "succeed"
    assert len(result.get("files")) > 0
    for file in result.get("files"):
        assert (symphony_storage / file["path"]).exists()
