name: "openbsd-packet-filter"
pipeline:
  - name: parsed_event
    external:
      name: grok.match
      properties:
        input_field: "{{original.message}}"
        output_field: message
        pattern: "%{PACKET_FILTER},(%{PF_IPV4}|%{PF_IPV6}),(%{PF_UDP}|%{PF_TCP}|%{PF_CARP}|%{PF_ICMP}|%{OTHER_1}|%{OTHER_2})"

        custom_patterns:
          PACKET_FILTER: "%{NUMBER:rulenr},%{DATA:subrulenr},%{DATA:anchorname},%{DATA:label},%{DATA:interface},%{WORD:reason},%{WORD:action},%{WORD:dir}"
          PF_IPV4: "4,%{WORD:tos},%{DATA:ecn},%{NUMBER:hoplimit},%{NUMBER:id},%{NUMBER:offset},%{WORD:flags},%{NUMBER:protonum},%{WORD:protoname},%{NUMBER:length},%{IPV4:src},%{IPV4:dst}"
          PF_IPV6: "6,%{DATA:class},%{DATA:flow},%{DATA:hoplimit},%{WORD:protoname},%{NUMBER:protonum},%{NUMBER:length},%{IPV6:src},%{IPV6:dst}"
          PF_UDP: "%{NUMBER:srcport},%{NUMBER:dstport},%{NUMBER:datalen}"
          PF_TCP: "%{NUMBER:srcport},%{NUMBER:dstport},%{NUMBER:datalen},%{WORD:tcp_flags},%{DATA:seq}?,%{DATA:ack},%{NUMBER:window},%{DATA:urg},%{GREEDYDATA:options}"
          PF_CARP: "%{DATA:type},%{NUMBER:hoplimit},%{DATA:vhid},%{NUMBER:version},%{NUMBER:advskew},%{NUMBER:advbase}"
          PF_ICMP: "datalength=%{NUMBER:datalength}"
          OTHER_1: "%{DATA:transport_type},%{DATA:class},%{DATA:seq}"
          OTHER_2: "%{DATA:transport_type},%{GREEDYDATA:error_msg}"

  - name: set_ecs_fields
stages:
  set_ecs_fields:
    actions:
      - set:
          source.ip: "{{parsed_event.message.src}}"
        filter: "{{parsed_event.message.src | is_ipaddress}}"
      - set:
          destination.ip: "{{parsed_event.message.dst}}"
        filter: "{{parsed_event.message.dst | is_ipaddress}}"
      - set:
          rule.id: "{{parsed_event.message.rulenr}}"
          openbsd.pf.rule.subrulenr: "{{parsed_event.message.subrulenr}}"
          rule.ruleset: "{{parsed_event.message.anchorname}}"
          openbsd.pf.event.tracker.id: "{{parsed_event.message.label}}"
          error.message: "{{parsed_event.message.error_msg}}"
          event.reason: "{{parsed_event.message.reason}}"
          event.action: "{{parsed_event.message.action}}"
          network.direction: "{{parsed_event.message.dir}}"
          openbsd.pf.routing.class: "{{parsed_event.message.tos}}"
          openbsd.pf.routing.hoplimit: "{{parsed_event.message.hoplimit}}"
          openbsd.pf.routing.offset: "{{parsed_event.message.offset}}"
          openbsd.pf.routing.flags: "{{parsed_event.message.flags}}"
          network.iana_number: "{{parsed_event.message.protonum}}"
          network.transport: "{{parsed_event.message.protoname | lower}}"
          network.bytes: "{{parsed_event.message.length}}"
          source.port: "{{parsed_event.message.srcport}}"
          destination.port: "{{parsed_event.message.dstport}}"
          openbsd.pf.transport.bytes: "{{parsed_event.message.datalen}}"
          openbsd.pf.transport.tcp_flags: "{{parsed_event.message.tcp_flags}}"
          openbsd.pf.transport.seq_number: "{{parsed_event.message.seq}}"
          openbsd.pf.transport.ack: "{{parsed_event.message.ack}}"
          openbsd.pf.transport.window_size: "{{parsed_event.message.window}}"
          openbsd.pf.transport.urgency: "{{parsed_event.message.urg}}"
          openbsd.pf.transport.options: "{{parsed_event.message.option}}"
          openbsd.pf.transport.classification: "{{parsed_event.message.class}}"
          openbsd.pf.transport.type: "{{parsed_event.message.transport_type}}"
          openbsd.pf.carp.vhid: "{{parsed_event.message.vhid}}"
          openbsd.pf.carp.version: "{{parsed_event.message.version}}"
          openbsd.pf.carp.advskew: "{{parsed_event.message.advskew}}"
          openbsd.pf.carp.advbase: "{{parsed_event.message.advbase}}"
          openbsd.pf.icmp.datalength: "{{parsed_event.message.datalength}}"
          openbsd.pf.routing.flow: "{{parsed_event.message.flow}}"
          openbsd.pf.carp.type: "{{parsed_event.message.type}}"

      - set:
          error.type: "{{parsed_event.message.transport_type}}"
        filter: "{{parsed_event.message.error_msg != None}}"

      - set:
          event.category: ["network"]
          event.type: ["connection"]

      - translate:
        dictionary:
          "block": ["denied"]
          "pass": ["allowed"]
        mapping:
          parsed_event.message.action: event.type
        fallback: ["info"]

      - set:
          observer.ingress.interface.name: "{{parsed_event.message.interface}}"
        filter: "{{parsed_event.message.dir == 'in'}}"

      - set:
          observer.egress.interface.name: "{{parsed_event.message.interface}}"
        filter: "{{parsed_event.message.dir == 'out'}}"

      - translate:
        dictionary:
          "in": "inbound"
          "out": "outbound"
        mapping:
          parsed_event.message.dir: network.direction
