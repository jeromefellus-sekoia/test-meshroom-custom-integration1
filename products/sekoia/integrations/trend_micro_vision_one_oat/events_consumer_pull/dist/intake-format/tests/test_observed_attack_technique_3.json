{
  "input": {
    "message": "{\"source\": \"endpointActivityData\", \"uuid\": \"43483725-969b-4fb8-a453-c2353a9a5e12\", \"detectedDateTime\": \"2024-11-26T16:45:01Z\", \"filters\": [{\"id\": \"F3367\", \"name\": \"Sensitive File Locating via Powershell\", \"description\": \"Locate files deemed sensitive via Powershell\", \"highlightedObjects\": [{\"field\": \"objectRawDataStr\", \"type\": \"amsi_rawDataStr\", \"value\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"]}, {\"field\": \"processCmd\", \"type\": \"command_line\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \"}, {\"field\": \"parentPid\", \"type\": \"process_id\", \"value\": 9920}, {\"field\": \"processPid\", \"type\": \"process_id\", \"value\": 5040}, {\"field\": \"parentCmd\", \"type\": \"command_line\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\"}], \"mitreTacticIds\": [\"TA0009\"], \"mitreTechniqueIds\": [\"T1005\"], \"riskLevel\": \"low\", \"type\": \"preset\"}, {\"id\": \"F1971\", \"name\": \"Modify File Last Modified Timestamp With PowerShell\", \"description\": \"An attempt to modify file's last modified timestamp using Powershell was detected on an endpoint.\", \"highlightedObjects\": [{\"field\": \"processCmd\", \"type\": \"command_line\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \"}, {\"field\": \"processPid\", \"type\": \"process_id\", \"value\": 5040}, {\"field\": \"objectRawDataStr\", \"type\": \"amsi_rawDataStr\", \"value\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"]}, {\"field\": \"parentPid\", \"type\": \"process_id\", \"value\": 9920}, {\"field\": \"parentCmd\", \"type\": \"command_line\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\"}], \"mitreTacticIds\": [\"TA0005\"], \"mitreTechniqueIds\": [\"T1070\", \"T1070.006\"], \"riskLevel\": \"info\", \"type\": \"preset\"}], \"detail\": {\"endpointGuid\": \"9567d4bc-ce0b-45cf-b259-138beb4c80c3\", \"endpointHostName\": \"Windows10\", \"endpointIp\": [\"1802:d896:65fe:0b84:742d:0615:f69b:6600\", \"193.103.164.106\"], \"eventId\": \"11\", \"eventSubId\": 901, \"eventTime\": \"1732639501774\", \"filterRiskLevel\": \"low\", \"firstSeen\": \"1732639501774\", \"groupId\": \"a1c0d757-0961-40a4-8a00-bf9b2922d5de\", \"integrityLevel\": 12288, \"lastSeen\": \"1732639503446\", \"logReceivedTime\": \"1732639512822\", \"logonUser\": [\"jdoe\"], \"objectAppName\": \"PowerShell_C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe_10.0.19041.1\", \"objectHashId\": \"-1780503710981816722\", \"objectRawDataStr\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"], \"osDescription\": \"Windows 10 Pro (64 bit) build 19045\", \"parentCmd\": \"C:\\\\Windows\\\\Explorer.EXE\", \"parentFileHashId\": \"1767110345653159701\", \"parentFileHashMd5\": \"f8ad78f2ad64799786242d69ef77edd7\", \"parentFileHashSha1\": \"f021ca2dca81ee77aa80467096a804a26cd11364\", \"parentFileHashSha256\": \"f2e4604dfae18859b13a4efee601df6937e99dd96251c11205c30022b308868f\", \"parentFilePath\": \"C:\\\\Windows\\\\explorer.exe\", \"parentHashId\": \"999588025188847480\", \"parentIntegrityLevel\": 12288, \"parentLaunchTime\": \"1732638953785\", \"parentName\": \"C:\\\\Windows\\\\explorer.exe\", \"parentPid\": 9920, \"parentSigner\": [\"Microsoft Windows\"], \"parentSignerValid\": [true], \"parentTrueType\": 7, \"parentUser\": \"jdoe\", \"parentUserDomain\": \"Windows10\", \"pname\": \"751\", \"processCmd\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \", \"processFileHashId\": \"-4900073020808934214\", \"processFileHashMd5\": \"bd5cf4568d83088240e3b33f9f9838b1\", \"processFileHashSha1\": \"b1692a60d67dc55538f9a25ad3874a6a8f6bb089\", \"processFileHashSha256\": \"4388c298be8260741724ebf8b414ca063247d6a0d5d5aa5318f90edda3189cd2\", \"processFilePath\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"processHashId\": \"-5529997575794356190\", \"processLaunchTime\": \"1732639075967\", \"processName\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"processPid\": 5040, \"processSigner\": [\"Microsoft Windows\"], \"processSignerValid\": [true], \"processTrueType\": 7, \"processUser\": \"jdoe\", \"processUserDomain\": \"Windows10\", \"productCode\": \"xes\", \"tags\": [\"XSAE.F1971\", \"XSAE.F3367\", \"MITRE.T1005\", \"MITRE.T1070.006\", \"MITRE.T1070\"], \"uuid\": \"b2ece961-6eed-43f1-8890-a8d926840049\", \"plang\": 1, \"pver\": \"1.2.0.5608\", \"processSignerFlagsLibValid\": [false], \"eventHashId\": \"7588760429245659303\", \"processFileSize\": \"212992\", \"eventSourceType\": 1, \"processSignerFlagsAdhoc\": [false], \"objectFirstSeen\": \"1732639501774\", \"processFileModifiedTime\": \"1575651900000\", \"pplat\": 5889, \"processSignerFlagsRuntime\": [false], \"timezone\": \"UTC+00:00\", \"osVer\": \"10.0.19045\", \"authId\": \"1494147\", \"endpointMacAddress\": [\"8f:86:c0:d8:9d:ad\"], \"osType\": \"0x00000030\", \"processFileCreation\": \"1575712305614\", \"userDomain\": [\"Windows10\"], \"sessionId\": 2, \"osName\": \"Windows\", \"objectLastSeen\": \"1732639503446\", \"parentSignerFlagsLibValid\": [false], \"parentFileCreation\": \"1728117061706\", \"parentSessionId\": 2, \"parentFileModifiedTime\": \"1728117061831\", \"parentSignerFlagsAdhoc\": [false], \"parentAuthId\": \"1494147\", \"parentSignerFlagsRuntime\": [false], \"parentFileSize\": \"5845320\", \"objectSessionId\": \"19746\", \"objectRawDataSize\": [\"2995\", \"3802\", \"50\", \"55\", \"44\", \"32\", \"169\", \"169\", \"170\", \"56\", \"107\", \"1848\", \"1719\", \"411\"]}, \"ingestedDateTime\": \"2024-11-26T16:45:25Z\", \"entityType\": \"endpoint\", \"entityName\": \"Windows10(1802:d896:65fe:0b84:742d:0615:f69b:6600,193.103.164.106)\", \"endpoint\": {\"ips\": [\"1802:d896:65fe:0b84:742d:0615:f69b:6600\", \"193.103.164.106\"], \"agentGuid\": \"8e53268d-8348-4fd4-a314-b742448960c9\", \"endpointName\": \"Windows10\"}}"
  },
  "expected": {
    "message": "{\"source\": \"endpointActivityData\", \"uuid\": \"43483725-969b-4fb8-a453-c2353a9a5e12\", \"detectedDateTime\": \"2024-11-26T16:45:01Z\", \"filters\": [{\"id\": \"F3367\", \"name\": \"Sensitive File Locating via Powershell\", \"description\": \"Locate files deemed sensitive via Powershell\", \"highlightedObjects\": [{\"field\": \"objectRawDataStr\", \"type\": \"amsi_rawDataStr\", \"value\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"]}, {\"field\": \"processCmd\", \"type\": \"command_line\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \"}, {\"field\": \"parentPid\", \"type\": \"process_id\", \"value\": 9920}, {\"field\": \"processPid\", \"type\": \"process_id\", \"value\": 5040}, {\"field\": \"parentCmd\", \"type\": \"command_line\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\"}], \"mitreTacticIds\": [\"TA0009\"], \"mitreTechniqueIds\": [\"T1005\"], \"riskLevel\": \"low\", \"type\": \"preset\"}, {\"id\": \"F1971\", \"name\": \"Modify File Last Modified Timestamp With PowerShell\", \"description\": \"An attempt to modify file's last modified timestamp using Powershell was detected on an endpoint.\", \"highlightedObjects\": [{\"field\": \"processCmd\", \"type\": \"command_line\", \"value\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \"}, {\"field\": \"processPid\", \"type\": \"process_id\", \"value\": 5040}, {\"field\": \"objectRawDataStr\", \"type\": \"amsi_rawDataStr\", \"value\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"]}, {\"field\": \"parentPid\", \"type\": \"process_id\", \"value\": 9920}, {\"field\": \"parentCmd\", \"type\": \"command_line\", \"value\": \"C:\\\\Windows\\\\Explorer.EXE\"}], \"mitreTacticIds\": [\"TA0005\"], \"mitreTechniqueIds\": [\"T1070\", \"T1070.006\"], \"riskLevel\": \"info\", \"type\": \"preset\"}], \"detail\": {\"endpointGuid\": \"9567d4bc-ce0b-45cf-b259-138beb4c80c3\", \"endpointHostName\": \"Windows10\", \"endpointIp\": [\"1802:d896:65fe:0b84:742d:0615:f69b:6600\", \"193.103.164.106\"], \"eventId\": \"11\", \"eventSubId\": 901, \"eventTime\": \"1732639501774\", \"filterRiskLevel\": \"low\", \"firstSeen\": \"1732639501774\", \"groupId\": \"a1c0d757-0961-40a4-8a00-bf9b2922d5de\", \"integrityLevel\": 12288, \"lastSeen\": \"1732639503446\", \"logReceivedTime\": \"1732639512822\", \"logonUser\": [\"jdoe\"], \"objectAppName\": \"PowerShell_C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe_10.0.19041.1\", \"objectHashId\": \"-1780503710981816722\", \"objectRawDataStr\": [\"\\r\\n                                    if ($_.FullyQualifiedErrorId -ne \\\"NativeCommandErrorMessage\\\" -and $ErrorView -ne \\\"CategoryView\\\")\\r\\n                                    {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and $myinv.MyCommand)\\r\\n                                        {\\r\\n                                            switch -regex ( $myinv.MyCommand.CommandType )\\r\\n                                            {\\r\\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.Path)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.Path + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                ([System.Management.Automation.CommandTypes]::Script)\\r\\n                                                {\\r\\n                                                    if ($myinv.MyCommand.ScriptBlock)\\r\\n                                                    {\\r\\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                                default\\r\\n                                                {\\r\\n                                                    if ($myinv.InvocationName -match '^[&\\\\.]?$')\\r\\n                                                    {\\r\\n                                                        if ($myinv.MyCommand.Name)\\r\\n                                                        {\\r\\n                                                            $myinv.MyCommand.Name + \\\" : \\\"\\r\\n                                                        }\\r\\n                                                    }\\r\\n                                                    else\\r\\n                                                    {\\r\\n                                                        $myinv.InvocationName + \\\" : \\\"\\r\\n                                                    }\\r\\n                                                    break\\r\\n                                                }\\r\\n                                            }\\r\\n                                        }\\r\\n                                        elseif ($myinv -and $myinv.InvocationName)\\r\\n                                        {\\r\\n                                            $myinv.InvocationName + \\\" : \\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                \", \"\\r\\n                                   if ($_.FullyQualifiedErrorId -eq \\\"NativeCommandErrorMessage\\\") {\\r\\n                                        $_.Exception.Message   \\r\\n                                   }\\r\\n                                   else\\r\\n                                   {\\r\\n                                        $myinv = $_.InvocationInfo\\r\\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\\r\\n                                            $posmsg = $myinv.PositionMessage\\r\\n                                        } else {\\r\\n                                            $posmsg = \\\"\\\"\\r\\n                                        }\\r\\n                                        \\r\\n                                        if ($posmsg -ne \\\"\\\")\\r\\n                                        {\\r\\n                                            $posmsg = \\\"`n\\\" + $posmsg\\r\\n                                        }\\r\\n    \\t\\t\\t\\t    \\r\\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\\r\\n                                            $posmsg = \\\" : \\\" +  $_.PSMessageDetails + $posmsg \\r\\n                                        }\\r\\n\\r\\n                                        $indent = 4\\r\\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\\r\\n\\r\\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\\r\\n                                        if ($errorCategoryMsg -ne $null)\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.ErrorCategory_Message\\r\\n                                        }\\r\\n                                        else\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ CategoryInfo          : \\\" + $_.CategoryInfo\\r\\n                                        }\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $indentString = \\\"+ FullyQualifiedErrorId : \\\" + $_.FullyQualifiedErrorId\\r\\n                                        $posmsg += \\\"`n\\\"\\r\\n                                        foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n\\r\\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\\r\\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\\r\\n                                        {\\r\\n                                            $indentString = \\\"+ PSComputerName        : \\\" + $originInfo.PSComputerName\\r\\n                                            $posmsg += \\\"`n\\\"\\r\\n                                            foreach($line in @($indentString -split \\\"(.{$width})\\\")) { if($line) { $posmsg += (\\\" \\\" * $indent + $line) } }\\r\\n                                        }\\r\\n\\r\\n                                        if ($ErrorView -eq \\\"CategoryView\\\") {\\r\\n                                            $_.CategoryInfo.GetMessage()\\r\\n                                        }\\r\\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\\r\\n                                            $_.Exception.Message + $posmsg + \\\"`n \\\"\\r\\n                                        } else {\\r\\n                                            $_.ErrorDetails.Message + $posmsg\\r\\n                                        }\\r\\n                                   }\\r\\n                                \", \"{ Set-StrictMode -Version 1; $_.PSMessageDetails }\", \"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\", \"{ Set-StrictMode -Version 1; $_.OriginInfo }\", \"{\\n    Write-Host $_.FullName\\n  }\", \"\\r\\n                                                  $_.PSParentPath.Replace(\\\"Microsoft.PowerShell.Core\\\\FileSystem::\\\", \\\"\\\")\\r\\n                                              \", \"\\r\\n                                    [String]::Format(\\\"{0,10}  {1,8}\\\", $_.LastWriteTime.ToString(\\\"d\\\"), $_.LastWriteTime.ToString(\\\"t\\\"))\\r\\n                                \", \"if ($_ -is [System.IO.DirectoryInfo]) { return '' }\\r\\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\\r\\n{\\r\\n    return '({0})' -f $_.Length\\r\\n}\\r\\nreturn $_.Length\", \"{\\n  if (Test-Path $_) {\\n    Write-Host \\\"$_ found.\\\"\\n  }\\n}\", \"{\\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\\n    Write-Host \\\"$_ Found!\\\" -ForegroundColor red\\n  }\\n}\", \"{\\n  $Drive = $_\\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\\n}\", \"{\\n    $path = $_\\n    #Exclude files/folders with 'lang' in the name\\n    if ($Path.FullName | select-string \\\"(?i).*lang.*\\\") {\\n      #Write-Host \\\"$($_.FullName) found!\\\" -ForegroundColor red\\n    }\\n    if($Path.FullName | Select-String \\\"(?i).:\\\\\\\\.*\\\\\\\\.*Pass.*\\\"){\\n      write-host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'pass'\\\"\\n    }\\n    if($Path.FullName | Select-String \\\".:\\\\\\\\.*\\\\\\\\.*user.*\\\" ){\\n      Write-Host -ForegroundColor Blue \\\"$($path.FullName) contains the word 'user' -excluding the 'users' directory\\\"\\n    }\\n    # If path name ends with common excel extensions\\n    elseif ($Path.FullName | Select-String \\\".*\\\\.xls\\\",\\\".*\\\\.xlsm\\\",\\\".*\\\\.xlsx\\\") {\\n      if ($ReadExcel -and $Excel) {\\n        Search-Excel -Source $Path.FullName -SearchText \\\"user\\\"\\n        Search-Excel -Source $Path.FullName -SearchText \\\"pass\\\"\\n      }\\n    }\\n    else {\\n      if ($path.Length -gt 0) {\\n        # Write-Host -ForegroundColor Blue \\\"Path name matches extension search: $path\\\"\\n      }\\n      if ($path.FullName | Select-String \\\"(?i).*SiteList\\\\.xml\\\") {\\n        Write-Host \\\"Possible MCaffee Site List Found: $($_.FullName)\\\"\\n        Write-Host \\\"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\\\" -ForegroundColor Yellow\\n      }\\n      $regexSearch.keys | ForEach-Object {\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\\n    }  \\n  }\", \"{\\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\\n        if ($passwordFound) {\\n          Write-Host \\\"Possible Password found: $_\\\" -ForegroundColor Yellow\\n          Write-Host $Path.FullName\\n          Write-Host -ForegroundColor Blue \\\"$_ triggered\\\"\\n          Write-Host $passwordFound -ForegroundColor Red\\n        }\\n      }\"], \"osDescription\": \"Windows 10 Pro (64 bit) build 19045\", \"parentCmd\": \"C:\\\\Windows\\\\Explorer.EXE\", \"parentFileHashId\": \"1767110345653159701\", \"parentFileHashMd5\": \"f8ad78f2ad64799786242d69ef77edd7\", \"parentFileHashSha1\": \"f021ca2dca81ee77aa80467096a804a26cd11364\", \"parentFileHashSha256\": \"f2e4604dfae18859b13a4efee601df6937e99dd96251c11205c30022b308868f\", \"parentFilePath\": \"C:\\\\Windows\\\\explorer.exe\", \"parentHashId\": \"999588025188847480\", \"parentIntegrityLevel\": 12288, \"parentLaunchTime\": \"1732638953785\", \"parentName\": \"C:\\\\Windows\\\\explorer.exe\", \"parentPid\": 9920, \"parentSigner\": [\"Microsoft Windows\"], \"parentSignerValid\": [true], \"parentTrueType\": 7, \"parentUser\": \"jdoe\", \"parentUserDomain\": \"Windows10\", \"pname\": \"751\", \"processCmd\": \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\PowerShell_ISE.exe\\\" \", \"processFileHashId\": \"-4900073020808934214\", \"processFileHashMd5\": \"bd5cf4568d83088240e3b33f9f9838b1\", \"processFileHashSha1\": \"b1692a60d67dc55538f9a25ad3874a6a8f6bb089\", \"processFileHashSha256\": \"4388c298be8260741724ebf8b414ca063247d6a0d5d5aa5318f90edda3189cd2\", \"processFilePath\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"processHashId\": \"-5529997575794356190\", \"processLaunchTime\": \"1732639075967\", \"processName\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\", \"processPid\": 5040, \"processSigner\": [\"Microsoft Windows\"], \"processSignerValid\": [true], \"processTrueType\": 7, \"processUser\": \"jdoe\", \"processUserDomain\": \"Windows10\", \"productCode\": \"xes\", \"tags\": [\"XSAE.F1971\", \"XSAE.F3367\", \"MITRE.T1005\", \"MITRE.T1070.006\", \"MITRE.T1070\"], \"uuid\": \"b2ece961-6eed-43f1-8890-a8d926840049\", \"plang\": 1, \"pver\": \"1.2.0.5608\", \"processSignerFlagsLibValid\": [false], \"eventHashId\": \"7588760429245659303\", \"processFileSize\": \"212992\", \"eventSourceType\": 1, \"processSignerFlagsAdhoc\": [false], \"objectFirstSeen\": \"1732639501774\", \"processFileModifiedTime\": \"1575651900000\", \"pplat\": 5889, \"processSignerFlagsRuntime\": [false], \"timezone\": \"UTC+00:00\", \"osVer\": \"10.0.19045\", \"authId\": \"1494147\", \"endpointMacAddress\": [\"8f:86:c0:d8:9d:ad\"], \"osType\": \"0x00000030\", \"processFileCreation\": \"1575712305614\", \"userDomain\": [\"Windows10\"], \"sessionId\": 2, \"osName\": \"Windows\", \"objectLastSeen\": \"1732639503446\", \"parentSignerFlagsLibValid\": [false], \"parentFileCreation\": \"1728117061706\", \"parentSessionId\": 2, \"parentFileModifiedTime\": \"1728117061831\", \"parentSignerFlagsAdhoc\": [false], \"parentAuthId\": \"1494147\", \"parentSignerFlagsRuntime\": [false], \"parentFileSize\": \"5845320\", \"objectSessionId\": \"19746\", \"objectRawDataSize\": [\"2995\", \"3802\", \"50\", \"55\", \"44\", \"32\", \"169\", \"169\", \"170\", \"56\", \"107\", \"1848\", \"1719\", \"411\"]}, \"ingestedDateTime\": \"2024-11-26T16:45:25Z\", \"entityType\": \"endpoint\", \"entityName\": \"Windows10(1802:d896:65fe:0b84:742d:0615:f69b:6600,193.103.164.106)\", \"endpoint\": {\"ips\": [\"1802:d896:65fe:0b84:742d:0615:f69b:6600\", \"193.103.164.106\"], \"agentGuid\": \"8e53268d-8348-4fd4-a314-b742448960c9\", \"endpointName\": \"Windows10\"}}",
    "event": {
      "category": [
        "intrusion_detection"
      ],
      "dataset": "endpointActivityData",
      "end": "2024-11-26T16:45:03.446000Z",
      "start": "2024-11-26T16:45:01.774000Z",
      "type": [
        "info"
      ]
    },
    "@timestamp": "2024-11-26T16:45:01Z",
    "action": {
      "properties": {
        "ScriptBlockText": [
          "\r\n                                                  $_.PSParentPath.Replace(\"Microsoft.PowerShell.Core\\FileSystem::\", \"\")\r\n                                              ",
          "\r\n                                    [String]::Format(\"{0,10}  {1,8}\", $_.LastWriteTime.ToString(\"d\"), $_.LastWriteTime.ToString(\"t\"))\r\n                                ",
          "\r\n                                    if ($_.FullyQualifiedErrorId -ne \"NativeCommandErrorMessage\" -and $ErrorView -ne \"CategoryView\")\r\n                                    {\r\n                                        $myinv = $_.InvocationInfo\r\n                                        if ($myinv -and $myinv.MyCommand)\r\n                                        {\r\n                                            switch -regex ( $myinv.MyCommand.CommandType )\r\n                                            {\r\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\r\n                                                {\r\n                                                    if ($myinv.MyCommand.Path)\r\n                                                    {\r\n                                                        $myinv.MyCommand.Path + \" : \"\r\n                                                    }\r\n                                                    break\r\n                                                }\r\n                                                ([System.Management.Automation.CommandTypes]::Script)\r\n                                                {\r\n                                                    if ($myinv.MyCommand.ScriptBlock)\r\n                                                    {\r\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + \" : \"\r\n                                                    }\r\n                                                    break\r\n                                                }\r\n                                                default\r\n                                                {\r\n                                                    if ($myinv.InvocationName -match '^[&\\.]?$')\r\n                                                    {\r\n                                                        if ($myinv.MyCommand.Name)\r\n                                                        {\r\n                                                            $myinv.MyCommand.Name + \" : \"\r\n                                                        }\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        $myinv.InvocationName + \" : \"\r\n                                                    }\r\n                                                    break\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        elseif ($myinv -and $myinv.InvocationName)\r\n                                        {\r\n                                            $myinv.InvocationName + \" : \"\r\n                                        }\r\n                                    }\r\n                                ",
          "\r\n                                   if ($_.FullyQualifiedErrorId -eq \"NativeCommandErrorMessage\") {\r\n                                        $_.Exception.Message   \r\n                                   }\r\n                                   else\r\n                                   {\r\n                                        $myinv = $_.InvocationInfo\r\n                                        if ($myinv -and ($myinv.MyCommand -or ($_.CategoryInfo.Category -ne 'ParserError'))) {\r\n                                            $posmsg = $myinv.PositionMessage\r\n                                        } else {\r\n                                            $posmsg = \"\"\r\n                                        }\r\n                                        \r\n                                        if ($posmsg -ne \"\")\r\n                                        {\r\n                                            $posmsg = \"`n\" + $posmsg\r\n                                        }\r\n    \t\t\t\t    \r\n                                        if ( & { Set-StrictMode -Version 1; $_.PSMessageDetails } ) {\r\n                                            $posmsg = \" : \" +  $_.PSMessageDetails + $posmsg \r\n                                        }\r\n\r\n                                        $indent = 4\r\n                                        $width = $host.UI.RawUI.BufferSize.Width - $indent - 2\r\n\r\n                                        $errorCategoryMsg = & { Set-StrictMode -Version 1; $_.ErrorCategory_Message }\r\n                                        if ($errorCategoryMsg -ne $null)\r\n                                        {\r\n                                            $indentString = \"+ CategoryInfo          : \" + $_.ErrorCategory_Message\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            $indentString = \"+ CategoryInfo          : \" + $_.CategoryInfo\r\n                                        }\r\n                                        $posmsg += \"`n\"\r\n                                        foreach($line in @($indentString -split \"(.{$width})\")) { if($line) { $posmsg += (\" \" * $indent + $line) } }\r\n\r\n                                        $indentString = \"+ FullyQualifiedErrorId : \" + $_.FullyQualifiedErrorId\r\n                                        $posmsg += \"`n\"\r\n                                        foreach($line in @($indentString -split \"(.{$width})\")) { if($line) { $posmsg += (\" \" * $indent + $line) } }\r\n\r\n                                        $originInfo = & { Set-StrictMode -Version 1; $_.OriginInfo }\r\n                                        if (($originInfo -ne $null) -and ($originInfo.PSComputerName -ne $null))\r\n                                        {\r\n                                            $indentString = \"+ PSComputerName        : \" + $originInfo.PSComputerName\r\n                                            $posmsg += \"`n\"\r\n                                            foreach($line in @($indentString -split \"(.{$width})\")) { if($line) { $posmsg += (\" \" * $indent + $line) } }\r\n                                        }\r\n\r\n                                        if ($ErrorView -eq \"CategoryView\") {\r\n                                            $_.CategoryInfo.GetMessage()\r\n                                        }\r\n                                        elseif (! $_.ErrorDetails -or ! $_.ErrorDetails.Message) {\r\n                                            $_.Exception.Message + $posmsg + \"`n \"\r\n                                        } else {\r\n                                            $_.ErrorDetails.Message + $posmsg\r\n                                        }\r\n                                   }\r\n                                ",
          "if ($_ -is [System.IO.DirectoryInfo]) { return '' }\r\nif ($_.Attributes -band [System.IO.FileAttributes]::Offline)\r\n{\r\n    return '({0})' -f $_.Length\r\n}\r\nreturn $_.Length",
          "{\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\n        if ($passwordFound) {\n          Write-Host \"Possible Password found: $_\" -ForegroundColor Yellow\n          Write-Host $Path.FullName\n          Write-Host -ForegroundColor Blue \"$_ triggered\"\n          Write-Host $passwordFound -ForegroundColor Red\n        }\n      }",
          "{\n    $path = $_\n    #Exclude files/folders with 'lang' in the name\n    if ($Path.FullName | select-string \"(?i).*lang.*\") {\n      #Write-Host \"$($_.FullName) found!\" -ForegroundColor red\n    }\n    if($Path.FullName | Select-String \"(?i).:\\\\.*\\\\.*Pass.*\"){\n      write-host -ForegroundColor Blue \"$($path.FullName) contains the word 'pass'\"\n    }\n    if($Path.FullName | Select-String \".:\\\\.*\\\\.*user.*\" ){\n      Write-Host -ForegroundColor Blue \"$($path.FullName) contains the word 'user' -excluding the 'users' directory\"\n    }\n    # If path name ends with common excel extensions\n    elseif ($Path.FullName | Select-String \".*\\.xls\",\".*\\.xlsm\",\".*\\.xlsx\") {\n      if ($ReadExcel -and $Excel) {\n        Search-Excel -Source $Path.FullName -SearchText \"user\"\n        Search-Excel -Source $Path.FullName -SearchText \"pass\"\n      }\n    }\n    else {\n      if ($path.Length -gt 0) {\n        # Write-Host -ForegroundColor Blue \"Path name matches extension search: $path\"\n      }\n      if ($path.FullName | Select-String \"(?i).*SiteList\\.xml\") {\n        Write-Host \"Possible MCaffee Site List Found: $($_.FullName)\"\n        Write-Host \"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\" -ForegroundColor Yellow\n      }\n      $regexSearch.keys | ForEach-Object {\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\n        if ($passwordFound) {\n          Write-Host \"Possible Password found: $_\" -ForegroundColor Yellow\n          Write-Host $Path.FullName\n          Write-Host -ForegroundColor Blue \"$_ triggered\"\n          Write-Host $passwordFound -ForegroundColor Red\n        }\n      }\n    }  \n  }",
          "{\n    Write-Host $_.FullName\n  }",
          "{\n  $Drive = $_\n  Get-ChildItem $Drive -Recurse -Include $fileExtensions -ErrorAction SilentlyContinue -Force | ForEach-Object {\n    $path = $_\n    #Exclude files/folders with 'lang' in the name\n    if ($Path.FullName | select-string \"(?i).*lang.*\") {\n      #Write-Host \"$($_.FullName) found!\" -ForegroundColor red\n    }\n    if($Path.FullName | Select-String \"(?i).:\\\\.*\\\\.*Pass.*\"){\n      write-host -ForegroundColor Blue \"$($path.FullName) contains the word 'pass'\"\n    }\n    if($Path.FullName | Select-String \".:\\\\.*\\\\.*user.*\" ){\n      Write-Host -ForegroundColor Blue \"$($path.FullName) contains the word 'user' -excluding the 'users' directory\"\n    }\n    # If path name ends with common excel extensions\n    elseif ($Path.FullName | Select-String \".*\\.xls\",\".*\\.xlsm\",\".*\\.xlsx\") {\n      if ($ReadExcel -and $Excel) {\n        Search-Excel -Source $Path.FullName -SearchText \"user\"\n        Search-Excel -Source $Path.FullName -SearchText \"pass\"\n      }\n    }\n    else {\n      if ($path.Length -gt 0) {\n        # Write-Host -ForegroundColor Blue \"Path name matches extension search: $path\"\n      }\n      if ($path.FullName | Select-String \"(?i).*SiteList\\.xml\") {\n        Write-Host \"Possible MCaffee Site List Found: $($_.FullName)\"\n        Write-Host \"Just going to leave this here: https://test.com/mcafee-sitelist-pwd-decryption\" -ForegroundColor Yellow\n      }\n      $regexSearch.keys | ForEach-Object {\n        $passwordFound = Get-Content $path.FullName -ErrorAction SilentlyContinue -Force | Select-String $regexSearch[$_] -Context 1, 1\n        if ($passwordFound) {\n          Write-Host \"Possible Password found: $_\" -ForegroundColor Yellow\n          Write-Host $Path.FullName\n          Write-Host -ForegroundColor Blue \"$_ triggered\"\n          Write-Host $passwordFound -ForegroundColor Red\n        }\n      }\n    }  \n  }\n}",
          "{\n  if (Test-Path $_ -ErrorAction SilentlyContinue) {\n    Write-Host \"$_ Found!\" -ForegroundColor red\n  }\n}",
          "{\n  if (Test-Path $_) {\n    Write-Host \"$_ found.\"\n  }\n}",
          "{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }",
          "{ Set-StrictMode -Version 1; $_.OriginInfo }",
          "{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
        ]
      }
    },
    "agent": {
      "id": "8e53268d-8348-4fd4-a314-b742448960c9"
    },
    "group": {
      "id": "a1c0d757-0961-40a4-8a00-bf9b2922d5de"
    },
    "host": {
      "id": "9567d4bc-ce0b-45cf-b259-138beb4c80c3",
      "ip": [
        "1802:d896:65fe:b84:742d:615:f69b:6600",
        "193.103.164.106"
      ],
      "name": "Windows10",
      "os": {
        "full": "Windows 10 Pro (64 bit) build 19045",
        "name": "Windows",
        "version": "10.0.19045"
      }
    },
    "observer": {
      "product": "Vision One",
      "vendor": "TrendMicro"
    },
    "process": {
      "name": "powershell_ise.exe",
      "parent": {
        "command_line": "\"C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\PowerShell_ISE.exe\" ",
        "executable": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
        "hash": {
          "md5": "bd5cf4568d83088240e3b33f9f9838b1",
          "sha1": "b1692a60d67dc55538f9a25ad3874a6a8f6bb089",
          "sha256": "4388c298be8260741724ebf8b414ca063247d6a0d5d5aa5318f90edda3189cd2"
        },
        "parent": {
          "command_line": "C:\\Windows\\Explorer.EXE",
          "executable": "C:\\Windows\\explorer.exe",
          "hash": {
            "md5": "f8ad78f2ad64799786242d69ef77edd7",
            "sha1": "f021ca2dca81ee77aa80467096a804a26cd11364",
            "sha256": "f2e4604dfae18859b13a4efee601df6937e99dd96251c11205c30022b308868f"
          },
          "name": "explorer.exe",
          "pid": "9920",
          "start": "2024-11-26T16:35:53.785000Z",
          "user": {
            "domain": "Windows10",
            "name": "jdoe"
          }
        },
        "pid": 5040,
        "start": "2024-11-26T16:37:55.967000Z",
        "user": {
          "domain": "Windows10",
          "name": "jdoe"
        }
      }
    },
    "related": {
      "hash": [
        "4388c298be8260741724ebf8b414ca063247d6a0d5d5aa5318f90edda3189cd2",
        "b1692a60d67dc55538f9a25ad3874a6a8f6bb089",
        "bd5cf4568d83088240e3b33f9f9838b1"
      ],
      "ip": [
        "1802:d896:65fe:b84:742d:615:f69b:6600",
        "193.103.164.106"
      ]
    },
    "threat": {
      "tactic": {
        "id": [
          "TA0005",
          "TA0009"
        ]
      },
      "technique": {
        "id": [
          "T1005",
          "T1070"
        ],
        "subtechnique": {
          "id": [
            "T1070.006"
          ]
        }
      }
    }
  }
}